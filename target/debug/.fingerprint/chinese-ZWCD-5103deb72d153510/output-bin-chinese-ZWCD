{"$message_type":"diagnostic","message":"unused import: `Html`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":79,"byte_end":83,"line_start":4,"line_end":4,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    response::{IntoResponse, Html},","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":77,"byte_end":83,"line_start":4,"line_end":4,"column_start":28,"column_end":34,"is_primary":true,"text":[{"text":"    response::{IntoResponse, Html},","highlight_start":28,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":64,"byte_end":65,"line_start":4,"line_end":4,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"    response::{IntoResponse, Html},","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":83,"byte_end":84,"line_start":4,"line_end":4,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"    response::{IntoResponse, Html},","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Html`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:4:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    response::{IntoResponse, Html},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(Nullable<Integer>, Text, Text): CompatibleType<User, Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\login.rs","byte_start":1578,"byte_end":1587,"line_start":60,"line_end":60,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        .first::<User>(&mut conn)","highlight_start":24,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\login.rs","byte_start":1564,"byte_end":1569,"line_start":60,"line_end":60,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"        .first::<User>(&mut conn)","highlight_start":10,"highlight_end":15}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `load_dsl::private::CompatibleType<User, Sqlite>` is not implemented for `(diesel::sql_types::Nullable<diesel::sql_types::Integer>, diesel::sql_types::Text, diesel::sql_types::Text)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"this is a mismatch between what your query returns and what your type expects the query to return","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the fields in your struct need to match the fields returned by your query in count, order and type","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `#[diesel(check_for_backend(Sqlite))]` on either `#[derive(Selectable)]` or `#[derive(QueryableByName)]` \non your struct `User` and in your query `.select(User::as_select())` to get a better error message","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:\n  (ST0, ST1)\n  (ST0, ST1, ST2)\n  (ST0, ST1, ST2, ST3)\n  (ST0, ST1, ST2, ST3, ST4)\n  (ST0, ST1, ST2, ST3, ST4, ST5)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ..., ..., ...>` to implement `LoadQuery<'_, _, User>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `first`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diesel-2.2.10\\src\\query_dsl\\mod.rs","byte_start":61065,"byte_end":61070,"line_start":1776,"line_end":1776,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"    fn first<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":13}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diesel-2.2.10\\src\\query_dsl\\mod.rs","byte_start":61187,"byte_end":61213,"line_start":1779,"line_end":1779,"column_start":22,"column_end":48,"is_primary":true,"text":[{"text":"        Limit<Self>: LoadQuery<'query, Conn, U>,","highlight_start":22,"highlight_end":48}],"label":"required by this bound in `RunQueryDsl::first`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-5850907458206475520.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `(Nullable<Integer>, Text, Text): CompatibleType<User, Sqlite>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\login.rs:60:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .first::<User>(&mut conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `load_dsl::private::CompatibleType<User, Sqlite>` is not implemented for `(diesel::sql_types::Nullable<diesel::sql_types::Integer>, diesel::sql_types::Text, diesel::sql_types::Text)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this is a mismatch between what your query returns and what your type expects the query to return\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the fields in your struct need to match the fields returned by your query in count, order and type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `#[diesel(check_for_backend(Sqlite))]` on either `#[derive(Selectable)]` or `#[derive(QueryableByName)]` \u001b[0m\n\u001b[0m             on your struct `User` and in your query `.select(User::as_select())` to get a better error message\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:\u001b[0m\n\u001b[0m               (ST0, ST1)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ..., ..., ...>` to implement `LoadQuery<'_, _, User>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `first`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diesel-2.2.10\\src\\query_dsl\\mod.rs:1779:22\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn first<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Limit<Self>: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::first`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-5850907458206475520.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `i32: FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\model.rs","byte_start":256,"byte_end":259,"line_start":10,"line_end":10,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    pub id: i32,","highlight_start":13,"highlight_end":16}],"label":"the trait `FromSql<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not implemented for `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"double check your type mappings via the documentation of `diesel::sql_types::Nullable<diesel::sql_types::Integer>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`diesel::sql_query` requires the loading target to column names for loading values.\nYou need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait `FromSql<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not implemented for `i32`\nbut trait `FromSql<diesel::sql_types::Integer, Sqlite>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `diesel::sql_types::Integer`, found `diesel::sql_types::Nullable<diesel::sql_types::Integer>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `i32` to implement `Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `i32` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `i32: FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\model.rs:10:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: i32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromSql<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not implemented for `i32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: double check your type mappings via the documentation of `diesel::sql_types::Nullable<diesel::sql_types::Integer>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `diesel::sql_query` requires the loading target to column names for loading values.\u001b[0m\n\u001b[0m           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `FromSql<\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::sql_types::Nullable<\u001b[0m\u001b[0mdiesel::sql_types::Integer\u001b[0m\u001b[0m\u001b[1m\u001b[35m>\u001b[0m\u001b[0m, Sqlite>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `i32`\u001b[0m\n\u001b[0m           but trait `FromSql<diesel::sql_types::Integer, Sqlite>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::sql_types::Integer\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::sql_types::Nullable<diesel::sql_types::Integer>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `i32` to implement `Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `i32` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `fn(State<(Pool<ConnectionManager<...>>, ...)>, ...) -> ... {register}: Handler<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1811,"byte_end":1826,"line_start":63,"line_end":63,"column_start":39,"column_end":54,"is_primary":true,"text":[{"text":"        .route(\"/auth/register\", post(login::register))","highlight_start":39,"highlight_end":54}],"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<(Pool<ConnectionManager<SqliteConnection>>, Arc<...>)>, ...) -> ... {register}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":1806,"byte_end":1810,"line_start":63,"line_end":63,"column_start":34,"column_end":38,"is_primary":false,"text":[{"text":"        .route(\"/auth/register\", post(login::register))","highlight_start":34,"highlight_end":38}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Consider using `#[axum::debug_handler]` to improve the error message","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `post`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12774,"byte_end":12778,"line_start":445,"line_end":445,"column_start":23,"column_end":27,"is_primary":false,"text":[{"text":"top_level_handler_fn!(post, POST);","highlight_start":23,"highlight_end":27}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":4727,"byte_end":4740,"line_start":167,"line_end":167,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"            H: Handler<T, S>,","highlight_start":16,"highlight_end":29}],"label":"required by this bound in `post`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":4294,"byte_end":4522,"line_start":151,"line_end":157,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        top_level_handler_fn!(","highlight_start":9,"highlight_end":31},{"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]","highlight_start":1,"highlight_end":97},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// See [`get`] for an example.","highlight_start":1,"highlight_end":44},{"text":"            $name,","highlight_start":1,"highlight_end":19},{"text":"            $method","highlight_start":1,"highlight_end":20},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12752,"byte_end":12785,"line_start":445,"line_end":445,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"top_level_handler_fn!(post, POST);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-8154602617943524997.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `fn(State<(Pool<ConnectionManager<...>>, ...)>, ...) -> ... {register}: Handler<_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:63:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .route(\"/auth/register\", post(login::register))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<_, _>` is not implemented for fn item `fn(State<(Pool<ConnectionManager<SqliteConnection>>, Arc<...>)>, ...) -> ... {register}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: Consider using `#[axum::debug_handler]` to improve the error message\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Handler<T, S>`:\u001b[0m\n\u001b[0m              `Layered<L, H, T, S>` implements `Handler<T, S>`\u001b[0m\n\u001b[0m              `MethodRouter<S>` implements `Handler<(), S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `post`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs:445:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtop_level_handler_fn!(post, POST);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `post`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-8154602617943524997.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `fn(State<(Pool<ConnectionManager<...>>, ...)>, ..., ...) -> ... {login}: Handler<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1864,"byte_end":1876,"line_start":64,"line_end":64,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"        .route(\"/auth/login\", post(login::login))","highlight_start":36,"highlight_end":48}],"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<(Pool<ConnectionManager<SqliteConnection>>, ...)>, ..., ...) -> ... {login}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":1859,"byte_end":1863,"line_start":64,"line_end":64,"column_start":31,"column_end":35,"is_primary":false,"text":[{"text":"        .route(\"/auth/login\", post(login::login))","highlight_start":31,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Consider using `#[axum::debug_handler]` to improve the error message","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `post`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12774,"byte_end":12778,"line_start":445,"line_end":445,"column_start":23,"column_end":27,"is_primary":false,"text":[{"text":"top_level_handler_fn!(post, POST);","highlight_start":23,"highlight_end":27}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":4727,"byte_end":4740,"line_start":167,"line_end":167,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"            H: Handler<T, S>,","highlight_start":16,"highlight_end":29}],"label":"required by this bound in `post`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":4294,"byte_end":4522,"line_start":151,"line_end":157,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        top_level_handler_fn!(","highlight_start":9,"highlight_end":31},{"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]","highlight_start":1,"highlight_end":97},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// See [`get`] for an example.","highlight_start":1,"highlight_end":44},{"text":"            $name,","highlight_start":1,"highlight_end":19},{"text":"            $method","highlight_start":1,"highlight_end":20},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12752,"byte_end":12785,"line_start":445,"line_end":445,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"top_level_handler_fn!(post, POST);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-3811599196904915836.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `fn(State<(Pool<ConnectionManager<...>>, ...)>, ..., ...) -> ... {login}: Handler<_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:64:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .route(\"/auth/login\", post(login::login))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<_, _>` is not implemented for fn item `fn(State<(Pool<ConnectionManager<SqliteConnection>>, ...)>, ..., ...) -> ... {login}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: Consider using `#[axum::debug_handler]` to improve the error message\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Handler<T, S>`:\u001b[0m\n\u001b[0m              `Layered<L, H, T, S>` implements `Handler<T, S>`\u001b[0m\n\u001b[0m              `MethodRouter<S>` implements `Handler<(), S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `post`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs:445:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtop_level_handler_fn!(post, POST);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `post`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the full name for the type has been written to 'C:\\Users\\gabri\\OneDrive\\Documenti\\GitHub\\SiteProject\\target\\debug\\deps\\chinese_ZWCD.long-type-3811599196904915836.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `fn(tower_sessions::Session) -> impl Future<Output = Result<Redirect, LoginError>> {logout}: Handler<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1914,"byte_end":1927,"line_start":65,"line_end":65,"column_start":36,"column_end":49,"is_primary":true,"text":[{"text":"        .route(\"/auth/logout\", get(login::logout))","highlight_start":36,"highlight_end":49}],"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(tower_sessions::Session) -> impl Future<Output = Result<Redirect, LoginError>> {logout}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":1910,"byte_end":1913,"line_start":65,"line_end":65,"column_start":32,"column_end":35,"is_primary":false,"text":[{"text":"        .route(\"/auth/logout\", get(login::logout))","highlight_start":32,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Consider using `#[axum::debug_handler]` to improve the error message","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `axum::routing::get`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12628,"byte_end":12631,"line_start":441,"line_end":441,"column_start":23,"column_end":26,"is_primary":false,"text":[{"text":"top_level_handler_fn!(get, GET);","highlight_start":23,"highlight_end":26}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":4727,"byte_end":4740,"line_start":167,"line_end":167,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"            H: Handler<T, S>,","highlight_start":16,"highlight_end":29}],"label":"required by this bound in `get`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3094,"byte_end":3887,"line_start":109,"line_end":132,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        top_level_handler_fn!(","highlight_start":9,"highlight_end":31},{"text":"            /// Route `GET` requests to the given handler.","highlight_start":1,"highlight_end":59},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// # Example","highlight_start":1,"highlight_end":26},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// ```rust","highlight_start":1,"highlight_end":24},{"text":"            /// use axum::{","highlight_start":1,"highlight_end":28},{"text":"            ///     routing::get,","highlight_start":1,"highlight_end":34},{"text":"            ///     Router,","highlight_start":1,"highlight_end":28},{"text":"            /// };","highlight_start":1,"highlight_end":19},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// async fn handler() {}","highlight_start":1,"highlight_end":38},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// // Requests to `GET /` will go to `handler`.","highlight_start":1,"highlight_end":61},{"text":"            /// let app = Router::new().route(\"/\", get(handler));","highlight_start":1,"highlight_end":66},{"text":"            /// # let _: Router = app;","highlight_start":1,"highlight_end":39},{"text":"            /// ```","highlight_start":1,"highlight_end":20},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have","highlight_start":1,"highlight_end":93},{"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes","highlight_start":1,"highlight_end":83},{"text":"            /// afterwards.","highlight_start":1,"highlight_end":28},{"text":"            $name,","highlight_start":1,"highlight_end":19},{"text":"            GET","highlight_start":1,"highlight_end":16},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":12606,"byte_end":12637,"line_start":441,"line_end":441,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"top_level_handler_fn!(get, GET);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"top_level_handler_fn!","def_site_span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs","byte_start":3008,"byte_end":3041,"line_start":105,"line_end":105,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! top_level_handler_fn {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `fn(tower_sessions::Session) -> impl Future<Output = Result<Redirect, LoginError>> {logout}: Handler<_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:65:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .route(\"/auth/logout\", get(login::logout))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<_, _>` is not implemented for fn item `fn(tower_sessions::Session) -> impl Future<Output = Result<Redirect, LoginError>> {logout}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: Consider using `#[axum::debug_handler]` to improve the error message\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Handler<T, S>`:\u001b[0m\n\u001b[0m              `Layered<L, H, T, S>` implements `Handler<T, S>`\u001b[0m\n\u001b[0m              `MethodRouter<S>` implements `Handler<(), S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `axum::routing::get`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\gabri\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-0.8.4\\src\\routing\\method_routing.rs:441:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m441\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtop_level_handler_fn!(get, GET);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `get`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 5 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 5 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
